// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: audio.proto

package audio

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrimRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileData      []byte                 `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	StartMs       int32                  `protobuf:"varint,2,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty"`
	EndMs         int32                  `protobuf:"varint,3,opt,name=end_ms,json=endMs,proto3" json:"end_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrimRequest) Reset() {
	*x = TrimRequest{}
	mi := &file_audio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimRequest) ProtoMessage() {}

func (x *TrimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimRequest.ProtoReflect.Descriptor instead.
func (*TrimRequest) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0}
}

func (x *TrimRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *TrimRequest) GetStartMs() int32 {
	if x != nil {
		return x.StartMs
	}
	return 0
}

func (x *TrimRequest) GetEndMs() int32 {
	if x != nil {
		return x.EndMs
	}
	return 0
}

type AudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileData      []byte                 `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	Format        string                 `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioResponse) Reset() {
	*x = AudioResponse{}
	mi := &file_audio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioResponse) ProtoMessage() {}

func (x *AudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioResponse.ProtoReflect.Descriptor instead.
func (*AudioResponse) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{1}
}

func (x *AudioResponse) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *AudioResponse) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

var File_audio_proto protoreflect.FileDescriptor

const file_audio_proto_rawDesc = "" +
	"\n" +
	"\vaudio.proto\x12\x05audio\"\\\n" +
	"\vTrimRequest\x12\x1b\n" +
	"\tfile_data\x18\x01 \x01(\fR\bfileData\x12\x19\n" +
	"\bstart_ms\x18\x02 \x01(\x05R\astartMs\x12\x15\n" +
	"\x06end_ms\x18\x03 \x01(\x05R\x05endMs\"D\n" +
	"\rAudioResponse\x12\x1b\n" +
	"\tfile_data\x18\x01 \x01(\fR\bfileData\x12\x16\n" +
	"\x06format\x18\x02 \x01(\tR\x06format2B\n" +
	"\x0eAudioProcessor\x120\n" +
	"\x04Trim\x12\x12.audio.TrimRequest\x1a\x14.audio.AudioResponseB\x15Z\x13backend/proto;audiob\x06proto3"

var (
	file_audio_proto_rawDescOnce sync.Once
	file_audio_proto_rawDescData []byte
)

func file_audio_proto_rawDescGZIP() []byte {
	file_audio_proto_rawDescOnce.Do(func() {
		file_audio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_audio_proto_rawDesc), len(file_audio_proto_rawDesc)))
	})
	return file_audio_proto_rawDescData
}

var file_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_audio_proto_goTypes = []any{
	(*TrimRequest)(nil),   // 0: audio.TrimRequest
	(*AudioResponse)(nil), // 1: audio.AudioResponse
}
var file_audio_proto_depIdxs = []int32{
	0, // 0: audio.AudioProcessor.Trim:input_type -> audio.TrimRequest
	1, // 1: audio.AudioProcessor.Trim:output_type -> audio.AudioResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_audio_proto_init() }
func file_audio_proto_init() {
	if File_audio_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_audio_proto_rawDesc), len(file_audio_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_proto_goTypes,
		DependencyIndexes: file_audio_proto_depIdxs,
		MessageInfos:      file_audio_proto_msgTypes,
	}.Build()
	File_audio_proto = out.File
	file_audio_proto_goTypes = nil
	file_audio_proto_depIdxs = nil
}
