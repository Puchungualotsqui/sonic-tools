// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"frontend/components/footer"
	"frontend/components/header"
)

func Layout(content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Hello World</title><!-- Tailwind + DaisyUI --><script src=\"https://cdn.tailwindcss.com\"></script><link href=\"https://cdn.jsdelivr.net/npm/daisyui@4.7.2/dist/full.css\" rel=\"stylesheet\"><!-- HTMX --><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><!-- Alpine.js --><script src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\" defer></script><script>\n            document.addEventListener(\"DOMContentLoaded\", () => {\n              document.body.addEventListener(\"htmx:afterSwap\", (e) => {\n                if (e.detail.target.id === \"body-container\") {\n                  // Reset uploader store when switching tools\n                  Alpine.store('uploader').files = [];\n                  Alpine.store('uploader').rejectedCount = 0;\n\n                  // Also reset hidden file input if you want\n                  const input = document.querySelector('#fileInput');\n                  if (input) input.value = '';\n                }\n              });\n            });\n            </script><script defer>\n  document.addEventListener('alpine:init', () => {\n    Alpine.store('uploader', {\n      files: [],\n      rejectedCount: 0,\n      allowedExts: ['.mp3', '.wav', '.flac', '.ogg', '.aac', '.m4a'],\n\n      addFiles(fileList) {\n        const incoming = Array.from(fileList);\n        let rejects = 0;\n\n        incoming.forEach(f => {\n          if (!this.isAllowed(f)) { rejects++; return; }\n          const id = `${f.name}-${f.size}-${f.lastModified}`;\n          if (!this.files.some(x => x.id === id)) {\n            this.files.push({ id, file: f, progress: 0 });\n          }\n        });\n\n        this.rejectedCount += rejects;\n      },\n\n      isAllowed(file) {\n        return this.allowedExts.some(ext => file.name.toLowerCase().endsWith(ext));\n      },\n\n      formatSize(bytes) {\n        return (bytes / 1024 / 1024).toFixed(2) + ' MB';\n      },\n\n      async upload() {\n        if (this.files.length === 0) return;\n\n        const form = document.querySelector('#toolForm');\n        let settingsJSON = \"{}\"; // default empty\n        if (form) {\n          const settingsObj = {};\n          new FormData(form).forEach((value, key) => {\n            if (key === \"files\") return;\n\n            if (settingsObj[key]) {\n              if (Array.isArray(settingsObj[key])) {\n                settingsObj[key].push(value);\n              } else {\n                settingsObj[key] = [settingsObj[key], value];\n              }\n            } else {\n              settingsObj[key] = value;\n            }\n          });\n\n          settingsObj[\"fileOrder\"] = this.files.map(f => f.file.name);\n\n          settingsJSON = JSON.stringify(settingsObj);\n        }\n\n        await Promise.all(this.files.map(item =>\n          new Promise((resolve, reject) => {\n            const formData = new FormData();\n            formData.append(\"files\", item.file);\n            formData.append(\"settings\", settingsJSON);\n\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"POST\", \"/api/upload\", true);\n            xhr.responseType = \"blob\";\n\n            xhr.upload.onprogress = (e) => {\n              if (e.lengthComputable) {\n                item.progress = (e.loaded / e.total) * 100;\n              }\n            };\n\n            xhr.onload = () => {\n              if (xhr.status === 200) {\n                const blob = xhr.response;\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement(\"a\");\n                a.href = url;\n\n                const disposition = xhr.getResponseHeader(\"Content-Disposition\");\n                let filename = item.file.name;\n                if (disposition && disposition.includes(\"filename=\")) {\n                  filename = disposition.split(\"filename=\")[1].replace(/\"/g, \"\");\n                }\n                a.download = filename;\n                a.click();\n                URL.revokeObjectURL(url);\n\n                item.progress = 100;\n                resolve();\n              } else {\n                reject(new Error(\"Upload failed for \" + item.file.name));\n              }\n            };\n\n            xhr.onerror = () => reject(new Error(\"Network error on \" + item.file.name));\n            xhr.send(formData);\n          })\n        ));\n      }\n    });\n  });\n</script></head><body class=\"min-h-screen flex flex-col bg-base-200\" x-data><div id=\"header-container\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = header.Header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><div id=\"body-container\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div><div id=\"footer-container\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = footer.Footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div></body></html><script>\n\n\n\t\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
