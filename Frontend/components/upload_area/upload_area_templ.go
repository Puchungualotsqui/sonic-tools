// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package upload_area

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func UploadArea() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"mb-8 space-y-4\" x-data=\"uploadArea()\"><!-- Drop Area --><label for=\"fileInput\" class=\"flex flex-col items-center justify-center w-full h-40 border-2 border-dashed rounded-lg cursor-pointer bg-base-200 hover:bg-base-300\" x-on:dragover.prevent x-on:drop.prevent=\"addFiles($event.dataTransfer.files)\"><div class=\"flex flex-col items-center justify-center pt-5 pb-6\"><svg class=\"w-10 h-10 mb-3 opacity-70\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 16a4 4 0 01-.88-7.903A5.002 5.002 0 0115.9 6H16a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"></path></svg><p class=\"mb-2 text-sm text-gray-500\">Click to upload or drag and drop</p><p class=\"text-xs text-gray-400\">MP3, WAV, FLAC, OGG, AAC, M4A</p></div><input id=\"fileInput\" type=\"file\" name=\"files\" accept=\".mp3,.wav,.flac,.ogg,.aac,.m4a\" multiple class=\"hidden\" x-on:change=\"onPickerChange($event)\"></label><!-- Uploaded Files List --><div id=\"uploadedFiles\" class=\"space-y-2\"><template x-for=\"item in files\" :key=\"item.id\"><div class=\"p-2 bg-base-200 rounded-lg\"><div class=\"flex items-center justify-between text-sm\"><div class=\"truncate\"><span class=\"font-medium truncate\" x-text=\"item.file.name\"></span> <span class=\"opacity-60 ml-2\" x-text=\"formatSize(item.file.size)\"></span></div><button type=\"button\" class=\"btn btn-ghost btn-xs\" x-on:click=\"remove(item.id)\">âœ•</button></div><progress class=\"progress progress-primary w-full mt-1\" :value=\"item.progress\" max=\"100\"></progress></div></template><!-- Feedback for skipped files --><p class=\"text-xs text-error\" x-show=\"rejectedCount > 0\" x-text=\"`${rejectedCount} file(s) skipped (invalid type)`\"></p></div></div><!-- Alpine component (define once on the page; safe inline here) --><script>\n    document.addEventListener('alpine:init', () => {\n      Alpine.data('uploadArea', () => ({\n        files: [],\n        rejectedCount: 0,\n        allowedExts: ['.mp3', '.wav', '.flac', '.ogg', '.aac', '.m4a'],\n\n        onPickerChange(e) {\n          this.addFiles(e.target.files);\n          // allow picking the same file again later\n          e.target.value = '';\n        },\n\n        addFiles(fileList) {\n          const incoming = Array.from(fileList);\n          let rejects = 0;\n\n          incoming.forEach(f => {\n            if (!this.isAllowed(f)) { rejects++; return; }\n            const id = `${f.name}-${f.size}-${f.lastModified}`;\n            // de-dupe by name+size+mtime\n            if (!this.files.some(x => x.id === id)) {\n              this.files.push({ id, file: f, progress: 0 });\n            }\n          });\n\n          this.rejectedCount += rejects;\n        },\n\n        remove(id) {\n          this.files = this.files.filter(x => x.id !== id);\n        },\n\n        isAllowed(file) {\n          const name = file.name.toLowerCase();\n          return this.allowedExts.some(ext => name.endsWith(ext));\n        },\n\n        formatSize(bytes) {\n          return (bytes / 1024 / 1024).toFixed(2) + ' MB';\n        }\n      }));\n    });\n  </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
