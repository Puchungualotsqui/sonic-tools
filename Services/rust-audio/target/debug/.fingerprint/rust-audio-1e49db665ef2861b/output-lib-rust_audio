{"$message_type":"diagnostic","message":"cannot find value `first_file` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/services/compress.rs","byte_start":1047,"byte_end":1057,"line_start":30,"line_end":30,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"            match compress_file(first_file, \"mp3\", bitrate) {","highlight_start":33,"highlight_end":43}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `first_file` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/services/compress.rs:30:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match compress_file(first_file, \"mp3\", bitrate) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/services/compress.rs","byte_start":592,"byte_end":1221,"line_start":20,"line_end":34,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        for (i, data) in req.file_data.into_iter().enumerate() {","highlight_start":9,"highlight_end":65},{"text":"            let filename = req.filenames.get(i).cloned().unwrap_or(\"output\".into());","highlight_start":1,"highlight_end":85},{"text":"            let ext = filename.split('.').last().unwrap_or(\"mp3\");","highlight_start":1,"highlight_end":67},{"text":"            let bitrate = match req.quality.as_str() {","highlight_start":1,"highlight_end":55},{"text":"                \"low\" => Some(64),","highlight_start":1,"highlight_end":35},{"text":"                \"medium\" => Some(128),","highlight_start":1,"highlight_end":39},{"text":"                \"high\" => Some(256),","highlight_start":1,"highlight_end":37},{"text":"                _ => Some(128),","highlight_start":1,"highlight_end":32},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match compress_file(first_file, \"mp3\", bitrate) {","highlight_start":1,"highlight_end":62},{"text":"                Ok(bytes) => outputs.push((filename, bytes)),","highlight_start":1,"highlight_end":62},{"text":"                Err(e) => return Err(Status::internal(e)),","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"expected `Result<Response<AudioResponse>, Status>`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/services/compress.rs","byte_start":592,"byte_end":1221,"line_start":20,"line_end":34,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        for (i, data) in req.file_data.into_iter().enumerate() {","highlight_start":9,"highlight_end":65},{"text":"            let filename = req.filenames.get(i).cloned().unwrap_or(\"output\".into());","highlight_start":1,"highlight_end":85},{"text":"            let ext = filename.split('.').last().unwrap_or(\"mp3\");","highlight_start":1,"highlight_end":67},{"text":"            let bitrate = match req.quality.as_str() {","highlight_start":1,"highlight_end":55},{"text":"                \"low\" => Some(64),","highlight_start":1,"highlight_end":35},{"text":"                \"medium\" => Some(128),","highlight_start":1,"highlight_end":39},{"text":"                \"high\" => Some(256),","highlight_start":1,"highlight_end":37},{"text":"                _ => Some(128),","highlight_start":1,"highlight_end":32},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match compress_file(first_file, \"mp3\", bitrate) {","highlight_start":1,"highlight_end":62},{"text":"                Ok(bytes) => outputs.push((filename, bytes)),","highlight_start":1,"highlight_end":62},{"text":"                Err(e) => return Err(Status::internal(e)),","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"  expected enum `Result<tonic::Response<AudioResponse>, Status>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"return type inferred to be `Result<tonic::Response<AudioResponse>, Status>` here","code":null,"level":"note","spans":[{"file_name":"src/services/compress.rs","byte_start":295,"byte_end":316,"line_start":11,"line_end":11,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"#[tonic::async_trait]","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/services/compress.rs","byte_start":295,"byte_end":316,"line_start":11,"line_end":11,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"#[tonic::async_trait]","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[tonic::async_trait]","def_site_span":{"file_name":"/home/dabid/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/async-trait-0.1.89/src/lib.rs","byte_start":7473,"byte_end":7545,"line_start":252,"line_end":252,"column_start":1,"column_end":73,"is_primary":false,"text":[{"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"`for` loops evaluate to unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try adding an expression at the end of the block","code":null,"level":"help","spans":[{"file_name":"src/services/compress.rs","byte_start":1221,"byte_end":1221,"line_start":34,"line_end":34,"column_start":10,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":10,"highlight_end":10}],"label":null,"suggested_replacement":"\n        Ok(())","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/services/compress.rs","byte_start":592,"byte_end":1221,"line_start":20,"line_end":34,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        for (i, data) in req.file_data.into_iter().enumerate() {","highlight_start":9,"highlight_end":65},{"text":"            let filename = req.filenames.get(i).cloned().unwrap_or(\"output\".into());","highlight_start":1,"highlight_end":85},{"text":"            let ext = filename.split('.').last().unwrap_or(\"mp3\");","highlight_start":1,"highlight_end":67},{"text":"            let bitrate = match req.quality.as_str() {","highlight_start":1,"highlight_end":55},{"text":"                \"low\" => Some(64),","highlight_start":1,"highlight_end":35},{"text":"                \"medium\" => Some(128),","highlight_start":1,"highlight_end":39},{"text":"                \"high\" => Some(256),","highlight_start":1,"highlight_end":37},{"text":"                _ => Some(128),","highlight_start":1,"highlight_end":32},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match compress_file(first_file, \"mp3\", bitrate) {","highlight_start":1,"highlight_end":62},{"text":"                Ok(bytes) => outputs.push((filename, bytes)),","highlight_start":1,"highlight_end":62},{"text":"                Err(e) => return Err(Status::internal(e)),","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/services/compress.rs:20:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (i, data) in req.file_data.into_iter().enumerate() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let filename = req.filenames.get(i).cloned().unwrap_or(\"output\".into());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let ext = filename.split('.').last().unwrap_or(\"mp3\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bitrate = match req.quality.as_str() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Result<Response<AudioResponse>, Status>`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:   expected enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<tonic::Response<AudioResponse>, Status>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: return type inferred to be `Result<tonic::Response<AudioResponse>, Status>` here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/services/compress.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[tonic::async_trait]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `for` loops evaluate to unit type `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `tonic::async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try adding an expression at the end of the block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         Ok(())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0425.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0425.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
